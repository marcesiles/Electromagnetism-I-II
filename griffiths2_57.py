# -*- coding: utf-8 -*-
"""griffiths2_57.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GxH8LPXTFLadGDIB5IlCfMroS0RiAvQe
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize

# a) sigma(r)
# definimos parámetros arbitrarios para cada constante
R = 2.5  # radio del disco
Q = 0.5  # carga asociada (C)

# se define la una función para la densidad de carga superficial
def sigma_density(r):
    return (Q / (4 * np.pi * R * np.sqrt(R**2 - r**2)))

# se hace una grilla para la parte radial para la función
r = np.linspace(0, R, 1000)

# se grafica la densidad en funcion del radio
density = sigma_density(r)
plt.figure(figsize=(8, 6))
plt.plot(r, density, label=r"$\sigma(r)$ vs $r$", color="r")
plt.xlabel("r")
plt.ylabel(r"$\sigma(r)$")
plt.axvline(x=R, color='black', linestyle=':', label='r = R')
plt.legend()
plt.grid(True)
plt.show()

# ahora se modelará la distribución de la carga en el disco en 2D
# se define entonces una grilla en coordenadas polares

r = np.linspace(-R, R, 1000) # se debe redefinir respecto a los datos establecidos anteriormente
phi = np.linspace(0, 2 * np.pi, 1000)
r, phi = np.meshgrid(r, phi)

x = r * np.cos(phi)
y = r * np.sin(phi)

# se calcula la densidad superficial para cada punto de r
sigma = sigma_density(r)

# se modela la visualización de la carga distribuida en todo el disco
plt.figure(figsize=(8, 8))
plt.pcolormesh(x, y, sigma, shading='auto', cmap='magma')
plt.colorbar(label=r'Distribución superficial de carga $\sigma(r)$ (C/m²)')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Distribución de la carga en el disco en 2D')
plt.gca().set_aspect('equal')  # se asegura que la visualización del plot no se distorsione
plt.show()

# b) sigma (x)
kappa_pr = 2 # constante definida como kappa'
a = 1.5 # constante asociada a las medidas de la cinta

def sigma_density(x):
    return (kappa_pr / (4 * np.pi * np.sqrt(a**2 - x**2)))

x = np.linspace(-a, a, 1000)

sigma = sigma_density(x)

# plot de la densidad en funcion de x

plt.figure(figsize=(8, 6))
plt.plot(x, sigma, label=r"$\sigma(x)$ vs $x$", color="r")
plt.xlabel("x")
plt.ylabel(r"$\sigma(x)$")  # Usar raw string para LaTeX
plt.axvline(x=a, color='black', linestyle=':', label=r'$x = \pm a$')  # Línea vertical en x = a
plt.axvline(x=-a, color='black', linestyle=':')  # Línea vertical en x = -a
plt.legend()
plt.grid(True)
plt.title("Densidad de Carga $\sigma(x)$ en una Cinta")
plt.show()

# Crear una malla 2D para la distribución de carga en el plano xy
x_2d = np.linspace(-a, a, 500)  # Dominio de x en 2D
y_2d = np.linspace(-a, a, 500)  # Dominio de y en 2D
x_2d, y_2d = np.meshgrid(x_2d, y_2d)  # Crear malla 2D

# Calcular la densidad de carga en la malla 2D
# La densidad de carga solo depende de x, por lo que ignoramos y
sigma_2d = sigma_density(x_2d)

# Graficar la distribución de carga en 2D
plt.figure(figsize=(8, 8))
plt.pcolormesh(x_2d, y_2d, sigma_2d, shading='auto', cmap='magma')
plt.colorbar(label=r'Distribución superficial de carga $\sigma(x)$ (C/m)')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Distribución de la carga en un "ribbon" en 2D')
plt.gca().set_aspect('equal')  # Asegura que la visualización no se distorsione
plt.show()

